pipeline {
    agent any

    tools {
        maven "MAVEN_HOME"
    }

    stages {
        stage('Get Latest Code') {
	        steps {
                echo 'Get Latest Code'
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mmukul/devsecops-training-lab.git']]])
	        }
	    }

        /*...........................Pre-commit hooks............................*/
        stage ('Pre-commit hooks') {
            steps {
                sh 'rm -rf .git/hooks/pre-commit || true'
                sh 'curl https://raw.githubusercontent.com/mmukul/pre-commit-hooks/main/install.sh > install-precommit.sh'
                sh 'chmod +x install-precommit.sh'
                sh './install-precommit.sh pre-commit'
            }
        }

        /*....................Software Composition Analysis....................*/
        stage ('SCA') {
            steps {
                sh '''
                mkdir -p reports || true
                VERSION=11.1.1
                curl -Ls "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
                unzip dependency-check.zip || true
                rm -rf dependency-check.zip
                cd dependency-check
                ./bin/dependency-check.sh --scan ../Module-6/JavaVulnerableLab.jar --out dependency-check-report.html --format HTML || true
                '''
                }
            }

        /*...........................SAST................................*/
        stage('SAST') {
            steps {
                withSonarQubeEnv('sonarserver') {
                    sh '''
                    docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-community || true
                    docker start sonarqube
                    mvn sonar:sonar -Dsonar.projectName=DevSecOps -Dsonar.java.binaries=. -Dsonar.projectKey=DevSecOps
                    '''
                }
            }
        }

        stage('Build App') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build Application Image'){
            steps{
                script{
                    sh 'docker build -t smilemukul/my-app-1.0:v1 .'
                }
            }
        }

        stage('Push image to DockerHub'){
            steps{
                script{
                   withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
                   sh 'docker login -u smilemukul -p ${dockerhubpwd}'
                }
                   sh 'docker push smilemukul/my-app-1.0:v1'
                }
            }
        }

        stage('Deploy in Container'){
            steps{
                script{
                    sh 'docker run smilemukul/my-app-1.0:v1'
                    echo 'Application is Successfully deployed in container'
                }
            }
        }

        stage('Scan Container for Vulnerability') {
            steps{
                script{
                    sh '''
                    curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
                    grype smilemukul/my-app-1.0:v1 --file reports/vulnerability-scan-report.json
                    '''
                }
            }
        }

        /*...........................DAST................................*/
        stage('DAST') {
            steps{
                script{
                    sh '''
                    mkdir -p reports || true
                    docker run -v $(pwd):/zap/wrk/:rw --user root -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://www.vulnweb.com -g gen.conf -r reports/zap-report.html || true
                    '''
                    }
                }
            }
        }

    post {
        always {
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'reports', reportFiles: 'dependency-check-report.html', reportName: 'OWASP Dependency-Check Report', reportTitles: 'OWASP Dependency-Check Report', useWrapperFileDirectly: true])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'reports', reportFiles: 'vulnerability-scan-report.json', reportName: 'Vulnerability Scan Report', reportTitles: 'Vulnerability Scan Report', useWrapperFileDirectly: true])
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'reports', reportFiles: 'zap-report.html', reportName: 'OWASP ZAP Security Report', reportTitles: 'OWASP ZAP Security Report', useWrapperFileDirectly: true])
        }
     }
  }
